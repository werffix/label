import os
import logging
import random
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

import db

load_dotenv()
API_TOKEN = os.getenv('6820348217:AAFDPmu57ZLh70kGbUq76yi7UaoPOXE6uCY')
ADMIN_ID   = int(os.getenv('7061277619', '0'))
if not API_TOKEN or not ADMIN_ID:
    raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –∏ ADMIN_ID –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    tariff          = State()
    release_name    = State()
    subtitle        = State()
    genre           = State()
    upc             = State()
    release_date    = State()
    vocals_info     = State()
    authors         = State()
    pitching        = State()
    files_link      = State()
    contact         = State()
    comments        = State()
    captcha         = State()

@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await db.init_db()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    if message.from_user.id == ADMIN_ID:
        kb.add("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –ª–µ–π–±–ª–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

# --- –ê–Ω–∫–µ—Ç–∞ (—Å —Ç–∞—Ä–∏—Ñ–æ–º, –¥–∞—Ç–æ–π, –∫–∞–ø—á–µ–π –∏ —Ç.–¥.) ---
@dp.message_handler(lambda m: m.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_form(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("MINI", "PLUS")
    await Form.tariff.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)

@dp.message_handler(state=Form.tariff)
async def process_tariff(message: types.Message, state: FSMContext):
    await state.update_data(tariff=message.text)
    await Form.release_name.set()
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞:")

@dp.message_handler(state=Form.release_name)
async def process_release_name(message: types.Message, state: FSMContext):
    await state.update_data(release_name=message.text)
    await Form.subtitle.set()
    await message.answer("–°–∞–±-–Ω–∞–∑–≤–∞–Ω–∏–µ (slowed, speed –∏ —Ç.–¥.):")

@dp.message_handler(state=Form.subtitle)
async def process_subtitle(message: types.Message, state: FSMContext):
    await state.update_data(subtitle=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("Pop", "Hip-Hop", "Rock", "Electronic", "Other")
    await Form.genre.set()
    await message.answer("–ñ–∞–Ω—Ä —Ä–µ–ª–∏–∑–∞:", reply_markup=kb)

@dp.message_handler(state=Form.genre)
async def process_genre(message: types.Message, state: FSMContext):
    await state.update_data(genre=message.text)
    await Form.upc.set()
    await message.answer("UPC (–ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ª–∏–≤–µ):", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Form.upc)
async def process_upc(message: types.Message, state: FSMContext):
    await state.update_data(upc=message.text)
    await Form.release_date.set()
    await message.answer("–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞ (–ì–ì–ì–ì-–ú–ú-–î–î, –º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π):")

@dp.message_handler(state=Form.release_date)
async def process_release_date(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        dt = datetime.fromisoformat(text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞—é –ì–ì–ì–ì-–ú–ú-–î–î.")
    if dt < datetime.now() + timedelta(days=7):
        return await message.answer("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π.")

    await state.update_data(release_date=text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ï—Å—Ç—å –≤–æ–∫–∞–ª –∏ —Ç–µ–∫—Å—Ç", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª (–±–µ–∑ –≤–æ–∫–∞–ª–∞)")
    await Form.vocals_info.set()
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∫–∞–ª–µ:", reply_markup=kb)

@dp.message_handler(state=Form.vocals_info)
async def process_vocals(message: types.Message, state: FSMContext):
    await state.update_data(vocals_info=message.text)
    await Form.authors.set()
    await message.answer("–§–ò–û –∞–≤—Ç–æ—Ä–æ–≤/–±–∏—Ç–º–µ–π–∫–µ—Ä–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª–∞:")

@dp.message_handler(state=Form.authors)
async def process_authors(message: types.Message, state: FSMContext):
    await state.update_data(authors=message.text)
    await Form.pitching.set()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–î–∞–ª–µ–µ")
    await message.answer(
        "–ü–∏—Ç—á–∏–Ω–≥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —Å—Å—ã–ª–∫–∞ link.cdcult.ru/pitching):",
        reply_markup=kb
    )

@dp.message_handler(state=Form.pitching)
async def process_pitching(message: types.Message, state: FSMContext):
    text = "" if message.text == "–î–∞–ª–µ–µ" else message.text
    await state.update_data(pitching=text)
    await Form.files_link.set()
    await message.answer(
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—Ä—Ö–∏–≤ + —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ Audio: .wav/.flac\n"
        "‚Ä¢ Cover: .jpg (‚âß3000√ó3000)\n"
        "‚Ä¢ –í–∏–¥–µ–æ —Å –¥–æ—Ä–æ–∂–∫–∞–º–∏ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)\n"
        "–í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä—Ö–∏–≤:"
    )

@dp.message_handler(state=Form.files_link)
async def process_files_link(message: types.Message, state: FSMContext):
    await state.update_data(files_link=message.text)
    await Form.contact.set()
    await message.answer("–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?")

@dp.message_handler(state=Form.contact)
async def process_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await Form.comments.set()
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):")

@dp.message_handler(state=Form.comments)
async def process_comments(message: types.Message, state: FSMContext):
    await state.update_data(comments=message.text)
    # –∫–∞–ø—á–∞
    a, b = random.randint(1, 10), random.randint(1, 10)
    await state.update_data(captcha_answer=a + b)
    await Form.captcha.set()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {a} + {b} = ?")

@dp.message_handler(state=Form.captcha)
async def process_captcha(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        ans = int(message.text)
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    if ans != data['captcha_answer']:
        a, b = random.randint(1, 10), random.randint(1, 10)
        await state.update_data(captcha_answer=a + b)
        return await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. {a} + {b} = ?")
    # –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –∏ —à–ª—ë–º –∞–¥–º–∏–Ω—É
    info = await state.get_data()
    await state.finish()
    text = (
        f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
        f"‚Ä¢ –¢–∞—Ä–∏—Ñ: {info['tariff']}\n"
        f"‚Ä¢ –†–µ–ª–∏–∑: {info['release_name']}\n"
        f"‚Ä¢ –°–∞–±: {info['subtitle']}\n"
        f"‚Ä¢ –ñ–∞–Ω—Ä: {info['genre']}\n"
        f"‚Ä¢ UPC: {info['upc']}\n"
        f"‚Ä¢ –î–∞—Ç–∞: {info['release_date']}\n"
        f"‚Ä¢ –í–æ–∫–∞–ª: {info['vocals_info']}\n"
        f"‚Ä¢ –ê–≤—Ç–æ—Ä—ã: {info['authors']}\n"
        f"‚Ä¢ –ü–∏—Ç—á–∏–Ω–≥: {info['pitching'] or '‚Äî'}\n"
        f"‚Ä¢ –ê—Ä—Ö–∏–≤: {info['files_link']}\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç: {info['contact']}\n"
        f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {info['comments'] or '‚Äî'}"
    )
    await bot.send_message(ADMIN_ID, text, parse_mode='HTML')
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.")

# ‚Äî –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞—Ä—Ç–∏—Å—Ç–∞ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Äî
@dp.message_handler(lambda m: m.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def show_cabinet(message: types.Message):
    user_id = message.from_user.id
    data = await db.get_artist(user_id)
    if not data:
        await db.upsert_artist(user_id)
        data = (0.0, 'MINI', 0)
    balance, tariff, tracks = data
    await message.answer(
        f"üë§ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:\n"
        f"‚Ä¢ –¢–∞—Ä–∏—Ñ: {tariff}\n"
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {balance:.2f}\n"
        f"‚Ä¢ –¢—Ä–µ–∫–æ–≤: {tracks}"
    )

@dp.message_handler(lambda m: m.text == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer(
        "–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        "/view <user_id>\n"
        "/bal <user_id> <amount>\n"
        "/tariff <user_id> <MINI|PLUS>\n"
        "/tracks <user_id> <count>"
    )

@dp.message_handler(lambda m: m.text.startswith("/view "))
async def cmd_view(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts)!=2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /view <user_id>")
    uid = int(parts[1])
    d = await db.get_artist(uid)
    if not d:
        return await message.answer("–ê—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    bal, trf, cnt = d
    await message.answer(f"ID {uid} ‚Üí –¢–∞—Ä–∏—Ñ: {trf}, –ë–∞–ª–∞–Ω—Å: {bal:.2f}, –¢—Ä–µ–∫–æ–≤: {cnt}")

@dp.message_handler(lambda m: m.text.startswith("/bal "))
async def cmd_bal(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    _, uid_s, amt_s = message.text.split(maxsplit=2)
    if not uid_s.isdigit():
        return await message.answer("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî user_id.")
    try: amt = float(amt_s)
    except:
        return await message.answer("–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî —á–∏—Å–ª–æ (–±–∞–ª–∞–Ω—Å).")
    uid = int(uid_s)
    await db.upsert_artist(uid, balance=amt)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ {uid} = {amt:.2f}")

@dp.message_handler(lambda m: m.text.startswith("/tariff "))
async def cmd_tariff(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    _, uid_s, trf = message.text.split(maxsplit=2)
    if not uid_s.isdigit() or trf not in ("MINI","PLUS"):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tariff <user_id> <MINI|PLUS>")
    uid = int(uid_s)
    await db.upsert_artist(uid, tariff=trf)
    await message.answer(f"–¢–∞—Ä–∏—Ñ {uid} = {trf}")

@dp.message_handler(lambda m: m.text.startswith("/tracks "))
async def cmd_tracks(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    _, uid_s, cnt_s = message.text.split(maxsplit=2)
    if not uid_s.isdigit() or not cnt_s.isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tracks <user_id> <count>")
    uid, cnt = int(uid_s), int(cnt_s)
    await db.upsert_artist(uid, tracks_count=cnt)
    await message.answer(f"–¢—Ä–µ–∫–æ–≤ —É {uid} = {cnt}")

if name == '__main__':
    executor.start_polling(dp, skip_updates=True)
